// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickType;
//
//    var animation = Animation.FromJson(jsonString);

namespace giftolottieSharp.Schema
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class Animation
    {
        /// <summary>
        /// source items that can be used in multiple places. Comps and Images for now.
        /// </summary>
        [JsonProperty("assets", NullValueHandling = NullValueHandling.Ignore)]
        public Asset[] Assets { get; set; }

        /// <summary>
        /// source chars for text layers
        /// </summary>
        [JsonProperty("chars", NullValueHandling = NullValueHandling.Ignore)]
        public Char[] Chars { get; set; }

        /// <summary>
        /// Composition has 3-D layers
        /// </summary>
        [JsonProperty("ddd", NullValueHandling = NullValueHandling.Ignore)]
        public double? Ddd { get; set; }

        /// <summary>
        /// Frame Rate
        /// </summary>
        [JsonProperty("fr", NullValueHandling = NullValueHandling.Ignore)]
        public int Fr { get; set; }

        /// <summary>
        /// Composition Height
        /// </summary>
        [JsonProperty("h", NullValueHandling = NullValueHandling.Ignore)]
        public int H { get; set; }

        /// <summary>
        /// In Point of the Time Ruler. Sets the initial Frame of the animation.
        /// </summary>
        [JsonProperty("ip", NullValueHandling = NullValueHandling.Ignore)]
        public int Ip { get; set; }

        /// <summary>
        /// List of Composition Layers
        /// </summary>
        [JsonProperty("layers", NullValueHandling = NullValueHandling.Ignore)]
        public List<AnimationLayer> Layers { get; set; }

        /// <summary>
        /// Composition name
        /// </summary>
        [JsonProperty("nm", NullValueHandling = NullValueHandling.Ignore)]
        public string Nm { get; set; }

        /// <summary>
        /// TGS
        /// </summary>
        [JsonProperty("tgs", NullValueHandling = NullValueHandling.Ignore)]
        public int Tgs { get; set; }
        /// <summary>
        /// Out Point of the Time Ruler. Sets the final Frame of the animation
        /// </summary>
        [JsonProperty("op", NullValueHandling = NullValueHandling.Ignore)]
        public int Op { get; set; }

        /// <summary>
        /// Bodymovin Version
        /// </summary>
        [JsonProperty("v", NullValueHandling = NullValueHandling.Ignore)]
        public string V { get; set; }

        /// <summary>
        /// Composition Width
        /// </summary>
        [JsonProperty("w", NullValueHandling = NullValueHandling.Ignore)]
        public int W { get; set; }
    }

    public partial class Asset
    {
        /// <summary>
        /// Image Height
        /// </summary>
        [JsonProperty("h", NullValueHandling = NullValueHandling.Ignore)]
        public double? H { get; set; }

        /// <summary>
        /// Image ID
        ///
        /// Precomp ID
        /// </summary>
        [JsonProperty("id", NullValueHandling = NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// Image name
        /// </summary>
        [JsonProperty("p", NullValueHandling = NullValueHandling.Ignore)]
        public string P { get; set; }

        /// <summary>
        /// Image path
        /// </summary>
        [JsonProperty("u", NullValueHandling = NullValueHandling.Ignore)]
        public string U { get; set; }

        /// <summary>
        /// Image Width
        /// </summary>
        [JsonProperty("w", NullValueHandling = NullValueHandling.Ignore)]
        public double? W { get; set; }

        /// <summary>
        /// List of Precomp Layers
        /// </summary>
        [JsonProperty("layers", NullValueHandling = NullValueHandling.Ignore)]
        public AssetLayer[] Layers { get; set; }
    }

    public partial class AssetLayer
    {
        /// <summary>
        /// Auto-Orient along path AE property.
        /// </summary>
        [JsonProperty("ao", NullValueHandling = NullValueHandling.Ignore)]
        public double? Ao { get; set; }

        /// <summary>
        /// Blend Mode
        /// </summary>
        [JsonProperty("bm", NullValueHandling = NullValueHandling.Ignore)]
        public double? Bm { get; set; }

        /// <summary>
        /// Parsed layer name used as html class on SVG/HTML renderer
        /// </summary>
        [JsonProperty("cl", NullValueHandling = NullValueHandling.Ignore)]
        public string Cl { get; set; }

        /// <summary>
        /// 3d layer flag
        /// </summary>
        [JsonProperty("ddd", NullValueHandling = NullValueHandling.Ignore)]
        public double? Ddd { get; set; }

        /// <summary>
        /// List of Effects
        ///
        /// Auto-Orient along path AE property.
        /// </summary>
        [JsonProperty("ef", NullValueHandling = NullValueHandling.Ignore)]
        public Ef? Ef { get; set; }

        /// <summary>
        /// Boolean when layer has a mask. Will be deprecated in favor of checking masksProperties.
        /// </summary>
        [JsonProperty("hasMask", NullValueHandling = NullValueHandling.Ignore)]
        public double? HasMask { get; set; }

        /// <summary>
        /// Layer index in AE. Used for parenting and expressions.
        /// </summary>
        [JsonProperty("ind", NullValueHandling = NullValueHandling.Ignore)]
        public double? Ind { get; set; }

        /// <summary>
        /// In Point of layer. Sets the initial frame of the layer.
        /// </summary>
        [JsonProperty("ip", NullValueHandling = NullValueHandling.Ignore)]
        public double? Ip { get; set; }

        /// <summary>
        /// Shape list of items
        /// </summary>
        [JsonProperty("it", NullValueHandling = NullValueHandling.Ignore)]
        public LayerIt[] It { get; set; }

        /// <summary>
        /// Transform properties
        /// </summary>
        [JsonProperty("ks", NullValueHandling = NullValueHandling.Ignore)]
        public KsClass Ks { get; set; }

        /// <summary>
        /// Parsed layer name used as html id on SVG/HTML renderer
        /// </summary>
        [JsonProperty("ln", NullValueHandling = NullValueHandling.Ignore)]
        public string Ln { get; set; }

        /// <summary>
        /// List of Masks
        /// </summary>
        [JsonProperty("masksProperties", NullValueHandling = NullValueHandling.Ignore)]
        public MasksProperty[] MasksProperties { get; set; }

        /// <summary>
        /// After Effects Layer Name. Used for expressions.
        /// </summary>
        [JsonProperty("nm", NullValueHandling = NullValueHandling.Ignore)]
        public double? Nm { get; set; }

        /// <summary>
        /// Out Point of layer. Sets the final frame of the layer.
        /// </summary>
        [JsonProperty("op", NullValueHandling = NullValueHandling.Ignore)]
        public double? Op { get; set; }

        /// <summary>
        /// Layer Parent. Uses ind of parent.
        /// </summary>
        [JsonProperty("parent", NullValueHandling = NullValueHandling.Ignore)]
        public double? Parent { get; set; }

        /// <summary>
        /// Layer Time Stretching
        /// </summary>
        [JsonProperty("sr", NullValueHandling = NullValueHandling.Ignore)]
        public double? Sr { get; set; }

        /// <summary>
        /// Start Time of layer. Sets the start time of the layer.
        /// </summary>
        [JsonProperty("st", NullValueHandling = NullValueHandling.Ignore)]
        public double? St { get; set; }

        /// <summary>
        /// Type of layer: Shape.
        ///
        /// Type of layer: Solid.
        ///
        /// Type of layer: Image.
        ///
        /// Type of layer: Null.
        ///
        /// Type of layer: Text.
        /// </summary>
        [JsonProperty("ty", NullValueHandling = NullValueHandling.Ignore)]
        public double? Ty { get; set; }

        /// <summary>
        /// Color of the solid in hex
        /// </summary>
        [JsonProperty("sc", NullValueHandling = NullValueHandling.Ignore)]
        public string Sc { get; set; }

        /// <summary>
        /// Height of the solid.
        /// </summary>
        [JsonProperty("sh", NullValueHandling = NullValueHandling.Ignore)]
        public double? Sh { get; set; }

        /// <summary>
        /// Width of the solid.
        /// </summary>
        [JsonProperty("sw", NullValueHandling = NullValueHandling.Ignore)]
        public double? Sw { get; set; }

        /// <summary>
        /// id pointing to the source image defined on 'assets' object
        /// </summary>
        [JsonProperty("refId", NullValueHandling = NullValueHandling.Ignore)]
        public string RefId { get; set; }
    }

    public partial class LayerIt
    {
        /// <summary>
        /// After Effect's Direction. Direction how the shape is drawn. Used for trim path for
        /// example.
        /// </summary>
        [JsonProperty("d", NullValueHandling = NullValueHandling.Ignore)]
        public double? D { get; set; }

        /// <summary>
        /// Shape's vertices
        /// </summary>
        [JsonProperty("ks", NullValueHandling = NullValueHandling.Ignore)]
        public Vertices Ks { get; set; }

        /// <summary>
        /// After Effect's Match Name. Used for expressions.
        /// </summary>
        [JsonProperty("mn", NullValueHandling = NullValueHandling.Ignore)]
        public string Mn { get; set; }

        /// <summary>
        /// After Effect's Name. Used for expressions.
        /// </summary>
        [JsonProperty("nm", NullValueHandling = NullValueHandling.Ignore)]
        public string Nm { get; set; }

        [JsonProperty("bm", NullValueHandling = NullValueHandling.Ignore)]
        public int Bm { get; set; }

        /// <summary>
        /// Shape content type.
        ///
        /// Shape content type. THIS FEATURE IS NOT SUPPORTED. It's exported because if you export
        /// it, they will come.
        /// </summary>
        [JsonProperty("ty", NullValueHandling = NullValueHandling.Ignore)]
        public string Ty { get; set; }

        /// <summary>
        /// Rect's position
        ///
        /// Ellipse's position
        ///
        /// Star's position
        /// </summary>
        [JsonProperty("p", NullValueHandling = NullValueHandling.Ignore)]
        public FluffyPosition P { get; set; }

        /// <summary>
        /// Rect's rounded corners
        ///
        /// Star's rotation.
        ///
        /// Rounded Corner Radius
        /// </summary>
        [JsonProperty("r", NullValueHandling = NullValueHandling.Ignore)]
        public FluffyRoundedCorners R { get; set; }

        /// <summary>
        /// Rect's size
        ///
        /// Ellipse's size
        ///
        /// Gradient Start Point
        ///
        /// Trim Start.
        /// </summary>
        [JsonProperty("s", NullValueHandling = NullValueHandling.Ignore)]
        public FluffySize S { get; set; }

        /// <summary>
        /// Star's inner radius. (Star only)
        /// </summary>
        [JsonProperty("ir", NullValueHandling = NullValueHandling.Ignore)]
        public InnerRadius Ir { get; set; }

        /// <summary>
        /// Star's inner roundness. (Star only)
        /// </summary>
        [JsonProperty("is", NullValueHandling = NullValueHandling.Ignore)]
        public InnerRoundness Is { get; set; }

        /// <summary>
        /// Star's outer radius.
        /// </summary>
        [JsonProperty("or", NullValueHandling = NullValueHandling.Ignore)]
        public OuterRadius Or { get; set; }

        /// <summary>
        /// Star's outer roundness.
        /// </summary>
        [JsonProperty("os", NullValueHandling = NullValueHandling.Ignore)]
        public OuterRoundness Os { get; set; }

        /// <summary>
        /// Star's number of points.
        /// </summary>
        [JsonProperty("pt", NullValueHandling = NullValueHandling.Ignore)]
        public ItPoints Pt { get; set; }

        /// <summary>
        /// Star's type. Polygon or Star.
        /// </summary>
        [JsonProperty("sy", NullValueHandling = NullValueHandling.Ignore)]
        public Dictionary<string, object> Sy { get; set; }

        /// <summary>
        /// Fill Color
        ///
        /// Stroke Color
        ///
        /// Number of Copies
        /// </summary>
        [JsonProperty("c", NullValueHandling = NullValueHandling.Ignore)]
        public Color C { get; set; }

        /// <summary>
        /// Fill Opacity
        ///
        /// Stroke Opacity
        ///
        /// Trim Offset.
        ///
        /// Offset of Copies
        /// </summary>
        [JsonProperty("o", NullValueHandling = NullValueHandling.Ignore)]
        public FluffyOpacity O { get; set; }

        /// <summary>
        /// Highlight Angle. Only if type is Radial
        /// </summary>
        [JsonProperty("a", NullValueHandling = NullValueHandling.Ignore)]
        public HighlightAngle A { get; set; }

        /// <summary>
        /// Gradient End Point
        ///
        /// Trim End.
        /// </summary>
        [JsonProperty("e", NullValueHandling = NullValueHandling.Ignore)]
        public End E { get; set; }

        /// <summary>
        /// Gradient Colors
        /// </summary>
        [JsonProperty("g", NullValueHandling = NullValueHandling.Ignore)]
        public Dictionary<string, object> G { get; set; }

        /// <summary>
        /// Gradient Highlight Length. Only if type is Radial
        /// </summary>
        [JsonProperty("h", NullValueHandling = NullValueHandling.Ignore)]
        public HighlightLength H { get; set; }

        /// <summary>
        /// Gradient Type
        /// </summary>
        [JsonProperty("t", NullValueHandling = NullValueHandling.Ignore)]
        public Dictionary<string, object> T { get; set; }

        /// <summary>
        /// Gradient Stroke Line Cap
        ///
        /// Stroke Line Cap
        /// </summary>
        [JsonProperty("lc", NullValueHandling = NullValueHandling.Ignore)]
        public double? Lc { get; set; }

        /// <summary>
        /// Gradient Stroke Line Join
        ///
        /// Stroke Line Join
        /// </summary>
        [JsonProperty("lj", NullValueHandling = NullValueHandling.Ignore)]
        public double? Lj { get; set; }

        /// <summary>
        /// Gradient Stroke Miter Limit. Only if Line Join is set to Miter.
        ///
        /// Stroke Miter Limit. Only if Line Join is set to Miter.
        /// </summary>
        [JsonProperty("ml", NullValueHandling = NullValueHandling.Ignore)]
        public double? Ml { get; set; }

        /// <summary>
        /// Gradient Stroke Width
        ///
        /// Stroke Width
        /// </summary>
        [JsonProperty("w", NullValueHandling = NullValueHandling.Ignore)]
        public Width W { get; set; }

        /// <summary>
        /// Merge Mode
        /// </summary>
        [JsonProperty("mm", NullValueHandling = NullValueHandling.Ignore)]
        public double? Mm { get; set; }

        /// <summary>
        /// Group list of items
        /// </summary>
        [JsonProperty("it", NullValueHandling = NullValueHandling.Ignore)]
        public List<ItIt> It { get; set; }

        /// <summary>
        /// Group number of properties. Used for expressions.
        /// </summary>
        [JsonProperty("np", NullValueHandling = NullValueHandling.Ignore)]
        public double? Np { get; set; }

        /// <summary>
        /// Composite of copies
        /// </summary>
        [JsonProperty("m", NullValueHandling = NullValueHandling.Ignore)]
        public double? M { get; set; }

        /// <summary>
        /// Transform values for each repeater copy
        /// </summary>
        [JsonProperty("tr", NullValueHandling = NullValueHandling.Ignore)]
        public Transform Tr { get; set; }
    }

    /// <summary>
    /// Highlight Angle. Only if type is Radial
    /// </summary>
    public partial class HighlightAngle
    {
        /// <summary>
        /// Property Index. Used for expressions.
        /// </summary>
        [JsonProperty("ix", NullValueHandling = NullValueHandling.Ignore)]
        public string Ix { get; set; }

        /// <summary>
        /// Property Value
        ///
        /// Property Value keyframes
        /// </summary>
        [JsonProperty("k", NullValueHandling = NullValueHandling.Ignore)]
        public PurpleK? K { get; set; }

        /// <summary>
        /// Property Expression. An AE expression that modifies the value.
        /// </summary>
        [JsonProperty("x", NullValueHandling = NullValueHandling.Ignore)]
        public string X { get; set; }
    }

    public partial class PropertiesvalueKeyframe
    {
        /// <summary>
        /// Bezier curve interpolation in value.
        /// </summary>
        [JsonProperty("i", NullValueHandling = NullValueHandling.Ignore)]
        public PurpleI I { get; set; }

        /// <summary>
        /// Start value of keyframe segment.
        /// </summary>
        [JsonProperty("s", NullValueHandling = NullValueHandling.Ignore)]
        public double? S { get; set; }

        /// <summary>
        /// Start time of keyframe segment.
        /// </summary>
        [JsonProperty("t", NullValueHandling = NullValueHandling.Ignore)]
        public double? T { get; set; }
    }

    /// <summary>
    /// Bezier curve interpolation in value.
    /// </summary>
    public partial class PurpleI
    {
        /// <summary>
        /// bezier x axis
        /// </summary>
        [JsonProperty("x", NullValueHandling = NullValueHandling.Ignore)]
        public double? X { get; set; }

        /// <summary>
        /// bezier y axis
        /// </summary>
        [JsonProperty("y", NullValueHandling = NullValueHandling.Ignore)]
        public double? Y { get; set; }
    }

    /// <summary>
    /// Fill Color
    ///
    /// Stroke Color
    ///
    /// Number of Copies
    /// </summary>
    public partial class Color
    {
        /// <summary>
        /// Property Index. Used for expressions.
        /// </summary>
        [JsonProperty("ix", NullValueHandling = NullValueHandling.Ignore)]
        public string Ix { get; set; }

        /// <summary>
        /// Property Value
        ///
        /// Property Value keyframes
        /// </summary>
        [JsonProperty("k", NullValueHandling = NullValueHandling.Ignore)]
        public CK? K { get; set; }

        /// <summary>
        /// Property Expression. An AE expression that modifies the value.
        /// </summary>
        [JsonProperty("x", NullValueHandling = NullValueHandling.Ignore)]
        public string X { get; set; }

        /// <summary>
        /// In Spatial Tangent. Only for spatial properties. Array of numbers.
        /// </summary>
        [JsonProperty("ti", NullValueHandling = NullValueHandling.Ignore)]
        public object[] Ti { get; set; }

        /// <summary>
        /// Out Spatial Tangent. Only for spatial properties. Array of numbers.
        /// </summary>
        [JsonProperty("to", NullValueHandling = NullValueHandling.Ignore)]
        public object[] To { get; set; }
    }

    /// <summary>
    /// Gradient End Point
    ///
    /// Trim End.
    /// </summary>
    public partial class End
    {
        /// <summary>
        /// Property Index. Used for expressions.
        /// </summary>
        [JsonProperty("ix", NullValueHandling = NullValueHandling.Ignore)]
        public string Ix { get; set; }

        /// <summary>
        /// Property Value
        ///
        /// Property Value keyframes
        /// </summary>
        [JsonProperty("k", NullValueHandling = NullValueHandling.Ignore)]
        public CK? K { get; set; }

        /// <summary>
        /// Property Expression. An AE expression that modifies the value.
        /// </summary>
        [JsonProperty("x", NullValueHandling = NullValueHandling.Ignore)]
        public string X { get; set; }

        /// <summary>
        /// In Spatial Tangent. Only for spatial properties. Array of numbers.
        /// </summary>
        [JsonProperty("ti", NullValueHandling = NullValueHandling.Ignore)]
        public object[] Ti { get; set; }

        /// <summary>
        /// Out Spatial Tangent. Only for spatial properties. Array of numbers.
        /// </summary>
        [JsonProperty("to", NullValueHandling = NullValueHandling.Ignore)]
        public object[] To { get; set; }
    }

    /// <summary>
    /// Gradient Highlight Length. Only if type is Radial
    /// </summary>
    public partial class HighlightLength
    {
        /// <summary>
        /// Property Index. Used for expressions.
        /// </summary>
        [JsonProperty("ix", NullValueHandling = NullValueHandling.Ignore)]
        public string Ix { get; set; }

        /// <summary>
        /// Property Value
        ///
        /// Property Value keyframes
        /// </summary>
        [JsonProperty("k", NullValueHandling = NullValueHandling.Ignore)]
        public PurpleK? K { get; set; }

        /// <summary>
        /// Property Expression. An AE expression that modifies the value.
        /// </summary>
        [JsonProperty("x", NullValueHandling = NullValueHandling.Ignore)]
        public string X { get; set; }
    }

    /// <summary>
    /// Star's inner radius. (Star only)
    /// </summary>
    public partial class InnerRadius
    {
        /// <summary>
        /// Property Index. Used for expressions.
        /// </summary>
        [JsonProperty("ix", NullValueHandling = NullValueHandling.Ignore)]
        public string Ix { get; set; }

        /// <summary>
        /// Property Value
        ///
        /// Property Value keyframes
        /// </summary>
        [JsonProperty("k", NullValueHandling = NullValueHandling.Ignore)]
        public PurpleK? K { get; set; }

        /// <summary>
        /// Property Expression. An AE expression that modifies the value.
        /// </summary>
        [JsonProperty("x", NullValueHandling = NullValueHandling.Ignore)]
        public string X { get; set; }
    }

    /// <summary>
    /// Star's inner roundness. (Star only)
    /// </summary>
    public partial class InnerRoundness
    {
        /// <summary>
        /// Property Index. Used for expressions.
        /// </summary>
        [JsonProperty("ix", NullValueHandling = NullValueHandling.Ignore)]
        public string Ix { get; set; }

        /// <summary>
        /// Property Value
        ///
        /// Property Value keyframes
        /// </summary>
        [JsonProperty("k", NullValueHandling = NullValueHandling.Ignore)]
        public PurpleK? K { get; set; }

        /// <summary>
        /// Property Expression. An AE expression that modifies the value.
        /// </summary>
        [JsonProperty("x", NullValueHandling = NullValueHandling.Ignore)]
        public string X { get; set; }
    }

    public partial class ItIt
    {
        /// <summary>
        /// After Effect's Direction. Direction how the shape is drawn. Used for trim path for
        /// example.
        /// </summary>
        [JsonProperty("d", NullValueHandling = NullValueHandling.Ignore)]
        public double? D { get; set; }

        /// <summary>
        /// Shape's vertices
        /// </summary>
        [JsonProperty("ks", NullValueHandling = NullValueHandling.Ignore)]
        public Vertices Ks { get; set; }

        /// <summary>
        /// After Effect's Match Name. Used for expressions.
        /// </summary>
        [JsonProperty("mn", NullValueHandling = NullValueHandling.Ignore)]
        public string Mn { get; set; }

        /// <summary>
        /// After Effect's Name. Used for expressions.
        /// </summary>
        [JsonProperty("nm", NullValueHandling = NullValueHandling.Ignore)]
        public string Nm { get; set; }

        /// <summary>
        /// Shape content type.
        ///
        /// Shape content type. THIS FEATURE IS NOT SUPPORTED. It's exported because if you export
        /// it, they will come.
        /// </summary>
        [JsonProperty("ty", NullValueHandling = NullValueHandling.Ignore)]
        public string Ty { get; set; }

        /// <summary>
        /// Rect's position
        ///
        /// Ellipse's position
        ///
        /// Star's position
        ///
        /// Shape Transform Position
        /// </summary>
        [JsonProperty("p", NullValueHandling = NullValueHandling.Ignore)]
        public PurplePosition P { get; set; }

        /// <summary>
        /// Rect's rounded corners
        ///
        /// Star's rotation.
        ///
        /// Rounded Corner Radius
        ///
        /// Shape Transform Rotation
        /// </summary>
        [JsonProperty("r", NullValueHandling = NullValueHandling.Ignore)]
        public PurpleRoundedCorners R { get; set; }

        /// <summary>
        /// Rect's size
        ///
        /// Ellipse's size
        ///
        /// Gradient Start Point
        ///
        /// Trim Start.
        ///
        /// Shape Transform Scale
        /// </summary>
        [JsonProperty("s", NullValueHandling = NullValueHandling.Ignore)]
        public PurpleSize S { get; set; }

        /// <summary>
        /// Star's inner radius. (Star only)
        /// </summary>
        [JsonProperty("ir", NullValueHandling = NullValueHandling.Ignore)]
        public InnerRadius Ir { get; set; }

        /// <summary>
        /// Star's inner roundness. (Star only)
        /// </summary>
        [JsonProperty("is", NullValueHandling = NullValueHandling.Ignore)]
        public InnerRoundness Is { get; set; }

        /// <summary>
        /// Star's outer radius.
        /// </summary>
        [JsonProperty("or", NullValueHandling = NullValueHandling.Ignore)]
        public OuterRadius Or { get; set; }

        /// <summary>
        /// Star's outer roundness.
        /// </summary>
        [JsonProperty("os", NullValueHandling = NullValueHandling.Ignore)]
        public OuterRoundness Os { get; set; }

        /// <summary>
        /// Star's number of points.
        /// </summary>
        [JsonProperty("pt", NullValueHandling = NullValueHandling.Ignore)]
        public ItPoints Pt { get; set; }

        /// <summary>
        /// Star's type. Polygon or Star.
        /// </summary>
        [JsonProperty("sy", NullValueHandling = NullValueHandling.Ignore)]
        public Dictionary<string, object> Sy { get; set; }

        /// <summary>
        /// Fill Color
        ///
        /// Stroke Color
        /// </summary>
        [JsonProperty("c", NullValueHandling = NullValueHandling.Ignore)]
        public PurpleColor C { get; set; }

        /// <summary>
        /// Fill Opacity
        ///
        /// Stroke Opacity
        ///
        /// Trim Offset.
        ///
        /// Shape Transform Opacity
        /// </summary>
        [JsonProperty("o", NullValueHandling = NullValueHandling.Ignore)]
        public PurpleOpacity O { get; set; }

        /// <summary>
        /// Highlight Angle. Only if type is Radial
        ///
        /// Shape Transform Anchor Point
        /// </summary>
        [JsonProperty("a", NullValueHandling = NullValueHandling.Ignore)]
        public PurpleHighlightAngle A { get; set; }

        /// <summary>
        /// Gradient End Point
        ///
        /// Trim End.
        /// </summary>
        [JsonProperty("e", NullValueHandling = NullValueHandling.Ignore)]
        public End E { get; set; }

        /// <summary>
        /// Gradient Colors
        /// </summary>
        [JsonProperty("g", NullValueHandling = NullValueHandling.Ignore)]
        public Dictionary<string, object> G { get; set; }

        /// <summary>
        /// Gradient Highlight Length. Only if type is Radial
        /// </summary>
        [JsonProperty("h", NullValueHandling = NullValueHandling.Ignore)]
        public HighlightLength H { get; set; }

        /// <summary>
        /// Gradient Type
        /// </summary>
        [JsonProperty("t", NullValueHandling = NullValueHandling.Ignore)]
        public Dictionary<string, object> T { get; set; }

        /// <summary>
        /// Gradient Stroke Line Cap
        ///
        /// Stroke Line Cap
        /// </summary>
        [JsonProperty("lc", NullValueHandling = NullValueHandling.Ignore)]
        public double? Lc { get; set; }

        /// <summary>
        /// Gradient Stroke Line Join
        ///
        /// Stroke Line Join
        /// </summary>
        [JsonProperty("lj", NullValueHandling = NullValueHandling.Ignore)]
        public double? Lj { get; set; }

        /// <summary>
        /// Gradient Stroke Miter Limit. Only if Line Join is set to Miter.
        ///
        /// Stroke Miter Limit. Only if Line Join is set to Miter.
        /// </summary>
        [JsonProperty("ml", NullValueHandling = NullValueHandling.Ignore)]
        public double? Ml { get; set; }

        /// <summary>
        /// Gradient Stroke Width
        ///
        /// Stroke Width
        /// </summary>
        [JsonProperty("w", NullValueHandling = NullValueHandling.Ignore)]
        public Width W { get; set; }

        /// <summary>
        /// Merge Mode
        /// </summary>
        [JsonProperty("mm", NullValueHandling = NullValueHandling.Ignore)]
        public double? Mm { get; set; }

        /// <summary>
        /// Group list of items
        /// </summary>
        [JsonProperty("it", NullValueHandling = NullValueHandling.Ignore)]
        public ItIt[] It { get; set; }

        /// <summary>
        /// Group number of properties. Used for expressions.
        /// </summary>
        [JsonProperty("np", NullValueHandling = NullValueHandling.Ignore)]
        public double? Np { get; set; }

        /// <summary>
        /// Shape Transform Skew Axis
        /// </summary>
        [JsonProperty("sa", NullValueHandling = NullValueHandling.Ignore)]
        public ItSkewAxis Sa { get; set; }

        /// <summary>
        /// Shape Transform Skew
        /// </summary>
        [JsonProperty("sk", NullValueHandling = NullValueHandling.Ignore)]
        public ItSkew Sk { get; set; }
    }

    /// <summary>
    /// Highlight Angle. Only if type is Radial
    ///
    /// Shape Transform Anchor Point
    /// </summary>
    public partial class PurpleHighlightAngle
    {
        /// <summary>
        /// Property Index. Used for expressions.
        /// </summary>
        [JsonProperty("ix", NullValueHandling = NullValueHandling.Ignore)]
        public string Ix { get; set; }

        /// <summary>
        /// Property Value
        ///
        /// Property Value keyframes
        /// </summary>
        [JsonProperty("k", NullValueHandling = NullValueHandling.Ignore)]
        public CK? K { get; set; }

        /// <summary>
        /// Property Expression. An AE expression that modifies the value.
        /// </summary>
        [JsonProperty("x", NullValueHandling = NullValueHandling.Ignore)]
        public string X { get; set; }

        /// <summary>
        /// In Spatial Tangent. Only for spatial properties. Array of numbers.
        /// </summary>
        [JsonProperty("ti", NullValueHandling = NullValueHandling.Ignore)]
        public object[] Ti { get; set; }

        /// <summary>
        /// Out Spatial Tangent. Only for spatial properties. Array of numbers.
        /// </summary>
        [JsonProperty("to", NullValueHandling = NullValueHandling.Ignore)]
        public object[] To { get; set; }
    }

    /// <summary>
    /// Fill Color
    ///
    /// Stroke Color
    /// </summary>
    public partial class PurpleColor
    {
        /// <summary>
        /// Property Index. Used for expressions.
        /// </summary>
        [JsonProperty("ix", NullValueHandling = NullValueHandling.Ignore)]
        public string Ix { get; set; }

        /// <summary>
        /// Property Value
        ///
        /// Property Value keyframes
        /// </summary>
        [JsonProperty("k", NullValueHandling = NullValueHandling.Ignore)]
        public int[] K { get; set; }

        /// <summary>
        /// Property Expression. An AE expression that modifies the value.
        /// </summary>
        [JsonProperty("x", NullValueHandling = NullValueHandling.Ignore)]
        public string X { get; set; }

        /// <summary>
        /// In Spatial Tangent. Only for spatial properties. Array of numbers.
        /// </summary>
        [JsonProperty("ti", NullValueHandling = NullValueHandling.Ignore)]
        public object[] Ti { get; set; }

        /// <summary>
        /// Out Spatial Tangent. Only for spatial properties. Array of numbers.
        /// </summary>
        [JsonProperty("to", NullValueHandling = NullValueHandling.Ignore)]
        public object[] To { get; set; }
    }

    /// <summary>
    /// Shape's vertices
    /// </summary>
    public partial class Vertices
    {
        /// <summary>
        /// Defines if property is animated
        /// </summary>
        [JsonProperty("a", NullValueHandling = NullValueHandling.Ignore)]
        public double? A { get; set; }

        /// <summary>
        /// Property Index. Used for expressions.
        /// </summary>
        [JsonProperty("ix", NullValueHandling = NullValueHandling.Ignore)]
        public string Ix { get; set; }

        /// <summary>
        /// Property Value
        ///
        /// Property Value keyframes
        /// </summary>
        [JsonProperty("k", NullValueHandling = NullValueHandling.Ignore)]
        public VerticesK? K { get; set; }

        /// <summary>
        /// Property Expression. An AE expression that modifies the value.
        /// </summary>
        [JsonProperty("x", NullValueHandling = NullValueHandling.Ignore)]
        public string X { get; set; }

        /// <summary>
        /// In Spatial Tangent. Only for spatial properties. Array of numbers.
        /// </summary>
        [JsonProperty("ti", NullValueHandling = NullValueHandling.Ignore)]
        public object[] Ti { get; set; }

        /// <summary>
        /// Out Spatial Tangent. Only for spatial properties. Array of numbers.
        /// </summary>
        [JsonProperty("to", NullValueHandling = NullValueHandling.Ignore)]
        public object[] To { get; set; }
    }

    public partial class PropertiesshapePropKeyframe
    {
        /// <summary>
        /// Bezier curve interpolation in value.
        /// </summary>
        [JsonProperty("i", NullValueHandling = NullValueHandling.Ignore)]
        public FluffyI I { get; set; }

        /// <summary>
        /// Bezier curve interpolation out value.
        /// </summary>
        [JsonProperty("o", NullValueHandling = NullValueHandling.Ignore)]
        public O O { get; set; }

        /// <summary>
        /// Start value of keyframe segment.
        /// </summary>
        [JsonProperty("s", NullValueHandling = NullValueHandling.Ignore)]
        public PropertiesshapeProp[] S { get; set; }

        /// <summary>
        /// Start time of keyframe segment.
        /// </summary>
        [JsonProperty("t", NullValueHandling = NullValueHandling.Ignore)]
        public double? T { get; set; }
    }

    /// <summary>
    /// Bezier curve interpolation in value.
    /// </summary>
    public partial class FluffyI
    {
        /// <summary>
        /// bezier x axis. Array of numbers.
        /// </summary>
        [JsonProperty("x", NullValueHandling = NullValueHandling.Ignore)]
        public object[] X { get; set; }

        /// <summary>
        /// bezier y axis. Array of numbers.
        /// </summary>
        [JsonProperty("y", NullValueHandling = NullValueHandling.Ignore)]
        public object[] Y { get; set; }
    }

    /// <summary>
    /// Bezier curve interpolation out value.
    /// </summary>
    public partial class O
    {
        /// <summary>
        /// bezier x axis. Array of numbers.
        /// </summary>
        [JsonProperty("x", NullValueHandling = NullValueHandling.Ignore)]
        public object[] X { get; set; }

        /// <summary>
        /// bezier y axis. Array of numbers.
        /// </summary>
        [JsonProperty("y", NullValueHandling = NullValueHandling.Ignore)]
        public object[] Y { get; set; }
    }

    /// <summary>
    /// Property Value
    /// </summary>
    public partial class PropertiesshapeProp
    {
        /// <summary>
        /// Closed property of shape
        /// </summary>
        [JsonProperty("c", NullValueHandling = NullValueHandling.Ignore)]
        public bool? C { get; set; }

        /// <summary>
        /// Bezier curve In points. Array of 2 dimensional arrays.
        /// </summary>
        [JsonProperty("i", NullValueHandling = NullValueHandling.Ignore)]
        public double[][] I { get; set; }

        /// <summary>
        /// Bezier curve Out points. Array of 2 dimensional arrays.
        /// </summary>
        [JsonProperty("o", NullValueHandling = NullValueHandling.Ignore)]
        public double[][] O { get; set; }

        /// <summary>
        /// Bezier curve Vertices. Array of 2 dimensional arrays.
        /// </summary>
        [JsonProperty("v", NullValueHandling = NullValueHandling.Ignore)]
        public double[][] V { get; set; }
    }

    /// <summary>
    /// Property Value
    /// </summary>
    public partial class KClass
    {
        /// <summary>
        /// Closed property of shape
        /// </summary>
        [JsonProperty("c", NullValueHandling = NullValueHandling.Ignore)]
        public bool? C { get; set; }

        /// <summary>
        /// Bezier curve In points. Array of 2 dimensional arrays.
        /// </summary>
        [JsonProperty("i", NullValueHandling = NullValueHandling.Ignore)]
        public double[][] I { get; set; }

        /// <summary>
        /// Bezier curve Out points. Array of 2 dimensional arrays.
        /// </summary>
        [JsonProperty("o", NullValueHandling = NullValueHandling.Ignore)]
        public double[][] O { get; set; }

        /// <summary>
        /// Bezier curve Vertices. Array of 2 dimensional arrays.
        /// </summary>
        [JsonProperty("v", NullValueHandling = NullValueHandling.Ignore)]
        public double[][] V { get; set; }
    }

    /// <summary>
    /// Fill Opacity
    ///
    /// Stroke Opacity
    ///
    /// Trim Offset.
    ///
    /// Shape Transform Opacity
    /// </summary>
    public partial class PurpleOpacity
    {
        /// <summary>
        /// Property Index. Used for expressions.
        /// </summary>
        [JsonProperty("ix", NullValueHandling = NullValueHandling.Ignore)]
        public string Ix { get; set; }

        /// <summary>
        /// Property Value
        ///
        /// Property Value keyframes
        /// </summary>
        [JsonProperty("k", NullValueHandling = NullValueHandling.Ignore)]
        public PurpleK? K { get; set; }

        /// <summary>
        /// Property Expression. An AE expression that modifies the value.
        /// </summary>
        [JsonProperty("x", NullValueHandling = NullValueHandling.Ignore)]
        public string X { get; set; }
    }

    /// <summary>
    /// Star's outer radius.
    /// </summary>
    public partial class OuterRadius
    {
        /// <summary>
        /// Property Index. Used for expressions.
        /// </summary>
        [JsonProperty("ix", NullValueHandling = NullValueHandling.Ignore)]
        public string Ix { get; set; }

        /// <summary>
        /// Property Value
        ///
        /// Property Value keyframes
        /// </summary>
        [JsonProperty("k", NullValueHandling = NullValueHandling.Ignore)]
        public PurpleK? K { get; set; }

        /// <summary>
        /// Property Expression. An AE expression that modifies the value.
        /// </summary>
        [JsonProperty("x", NullValueHandling = NullValueHandling.Ignore)]
        public string X { get; set; }
    }

    /// <summary>
    /// Star's outer roundness.
    /// </summary>
    public partial class OuterRoundness
    {
        /// <summary>
        /// Property Index. Used for expressions.
        /// </summary>
        [JsonProperty("ix", NullValueHandling = NullValueHandling.Ignore)]
        public string Ix { get; set; }

        /// <summary>
        /// Property Value
        ///
        /// Property Value keyframes
        /// </summary>
        [JsonProperty("k", NullValueHandling = NullValueHandling.Ignore)]
        public PurpleK? K { get; set; }

        /// <summary>
        /// Property Expression. An AE expression that modifies the value.
        /// </summary>
        [JsonProperty("x", NullValueHandling = NullValueHandling.Ignore)]
        public string X { get; set; }
    }

    /// <summary>
    /// Rect's position
    ///
    /// Ellipse's position
    ///
    /// Star's position
    ///
    /// Shape Transform Position
    /// </summary>
    public partial class PurplePosition
    {
        /// <summary>
        /// Property Index. Used for expressions.
        /// </summary>
        [JsonProperty("ix", NullValueHandling = NullValueHandling.Ignore)]
        public string Ix { get; set; }

        /// <summary>
        /// Property Value
        ///
        /// Property Value keyframes
        /// </summary>
        [JsonProperty("k", NullValueHandling = NullValueHandling.Ignore)]
        public double[] K { get; set; }

        /// <summary>
        /// Property Expression. An AE expression that modifies the value.
        /// </summary>
        [JsonProperty("x", NullValueHandling = NullValueHandling.Ignore)]
        public string X { get; set; }

        /// <summary>
        /// In Spatial Tangent. Only for spatial properties. Array of numbers.
        /// </summary>
        [JsonProperty("ti", NullValueHandling = NullValueHandling.Ignore)]
        public object[] Ti { get; set; }

        /// <summary>
        /// Out Spatial Tangent. Only for spatial properties. Array of numbers.
        /// </summary>
        [JsonProperty("to", NullValueHandling = NullValueHandling.Ignore)]
        public object[] To { get; set; }
    }

    /// <summary>
    /// Star's number of points.
    /// </summary>
    public partial class ItPoints
    {
        /// <summary>
        /// Property Index. Used for expressions.
        /// </summary>
        [JsonProperty("ix", NullValueHandling = NullValueHandling.Ignore)]
        public string Ix { get; set; }

        /// <summary>
        /// Property Value
        ///
        /// Property Value keyframes
        /// </summary>
        [JsonProperty("k", NullValueHandling = NullValueHandling.Ignore)]
        public PurpleK? K { get; set; }

        /// <summary>
        /// Property Expression. An AE expression that modifies the value.
        /// </summary>
        [JsonProperty("x", NullValueHandling = NullValueHandling.Ignore)]
        public string X { get; set; }
    }

    /// <summary>
    /// Rect's rounded corners
    ///
    /// Star's rotation.
    ///
    /// Rounded Corner Radius
    ///
    /// Shape Transform Rotation
    /// </summary>
    public partial class PurpleRoundedCorners
    {
        /// <summary>
        /// Property Index. Used for expressions.
        /// </summary>
        [JsonProperty("ix", NullValueHandling = NullValueHandling.Ignore)]
        public string Ix { get; set; }

        /// <summary>
        /// Property Value
        ///
        /// Property Value keyframes
        /// </summary>
        [JsonProperty("k", NullValueHandling = NullValueHandling.Ignore)]
        public PurpleK? K { get; set; }

        /// <summary>
        /// Property Expression. An AE expression that modifies the value.
        /// </summary>
        [JsonProperty("x", NullValueHandling = NullValueHandling.Ignore)]
        public string X { get; set; }
    }

    /// <summary>
    /// Rect's size
    ///
    /// Ellipse's size
    ///
    /// Gradient Start Point
    ///
    /// Trim Start.
    ///
    /// Shape Transform Scale
    /// </summary>
    public partial class PurpleSize
    {
        /// <summary>
        /// Property Index. Used for expressions.
        /// </summary>
        [JsonProperty("ix", NullValueHandling = NullValueHandling.Ignore)]
        public string Ix { get; set; }

        /// <summary>
        /// Property Value
        ///
        /// Property Value keyframes
        /// </summary>
        [JsonProperty("k", NullValueHandling = NullValueHandling.Ignore)]
        public CK? K { get; set; }

        /// <summary>
        /// Property Expression. An AE expression that modifies the value.
        /// </summary>
        [JsonProperty("x", NullValueHandling = NullValueHandling.Ignore)]
        public string X { get; set; }

        /// <summary>
        /// In Spatial Tangent. Only for spatial properties. Array of numbers.
        /// </summary>
        [JsonProperty("ti", NullValueHandling = NullValueHandling.Ignore)]
        public object[] Ti { get; set; }

        /// <summary>
        /// Out Spatial Tangent. Only for spatial properties. Array of numbers.
        /// </summary>
        [JsonProperty("to", NullValueHandling = NullValueHandling.Ignore)]
        public object[] To { get; set; }
    }

    /// <summary>
    /// Shape Transform Skew Axis
    /// </summary>
    public partial class ItSkewAxis
    {
        /// <summary>
        /// Property Index. Used for expressions.
        /// </summary>
        [JsonProperty("ix", NullValueHandling = NullValueHandling.Ignore)]
        public string Ix { get; set; }

        /// <summary>
        /// Property Value
        ///
        /// Property Value keyframes
        /// </summary>
        [JsonProperty("k", NullValueHandling = NullValueHandling.Ignore)]
        public PurpleK? K { get; set; }

        /// <summary>
        /// Property Expression. An AE expression that modifies the value.
        /// </summary>
        [JsonProperty("x", NullValueHandling = NullValueHandling.Ignore)]
        public string X { get; set; }
    }

    /// <summary>
    /// Shape Transform Skew
    /// </summary>
    public partial class ItSkew
    {
        /// <summary>
        /// Property Index. Used for expressions.
        /// </summary>
        [JsonProperty("ix", NullValueHandling = NullValueHandling.Ignore)]
        public string Ix { get; set; }

        /// <summary>
        /// Property Value
        ///
        /// Property Value keyframes
        /// </summary>
        [JsonProperty("k", NullValueHandling = NullValueHandling.Ignore)]
        public PurpleK? K { get; set; }

        /// <summary>
        /// Property Expression. An AE expression that modifies the value.
        /// </summary>
        [JsonProperty("x", NullValueHandling = NullValueHandling.Ignore)]
        public string X { get; set; }
    }

    /// <summary>
    /// Gradient Stroke Width
    ///
    /// Stroke Width
    /// </summary>
    public partial class Width
    {
        /// <summary>
        /// Property Index. Used for expressions.
        /// </summary>
        [JsonProperty("ix", NullValueHandling = NullValueHandling.Ignore)]
        public string Ix { get; set; }

        /// <summary>
        /// Property Value
        ///
        /// Property Value keyframes
        /// </summary>
        [JsonProperty("k", NullValueHandling = NullValueHandling.Ignore)]
        public PurpleK? K { get; set; }

        /// <summary>
        /// Property Expression. An AE expression that modifies the value.
        /// </summary>
        [JsonProperty("x", NullValueHandling = NullValueHandling.Ignore)]
        public string X { get; set; }
    }

    /// <summary>
    /// Fill Opacity
    ///
    /// Stroke Opacity
    ///
    /// Trim Offset.
    ///
    /// Offset of Copies
    /// </summary>
    public partial class FluffyOpacity
    {
        /// <summary>
        /// Property Index. Used for expressions.
        /// </summary>
        [JsonProperty("ix", NullValueHandling = NullValueHandling.Ignore)]
        public string Ix { get; set; }

        /// <summary>
        /// Property Value
        ///
        /// Property Value keyframes
        /// </summary>
        [JsonProperty("k", NullValueHandling = NullValueHandling.Ignore)]
        public PurpleK? K { get; set; }

        /// <summary>
        /// Property Expression. An AE expression that modifies the value.
        /// </summary>
        [JsonProperty("x", NullValueHandling = NullValueHandling.Ignore)]
        public string X { get; set; }
    }

    /// <summary>
    /// Rect's position
    ///
    /// Ellipse's position
    ///
    /// Star's position
    /// </summary>
    public partial class FluffyPosition
    {
        /// <summary>
        /// Property Index. Used for expressions.
        /// </summary>
        [JsonProperty("ix", NullValueHandling = NullValueHandling.Ignore)]
        public string Ix { get; set; }

        /// <summary>
        /// Property Value
        ///
        /// Property Value keyframes
        /// </summary>
        [JsonProperty("k", NullValueHandling = NullValueHandling.Ignore)]
        public object[] K { get; set; }

        /// <summary>
        /// Property Expression. An AE expression that modifies the value.
        /// </summary>
        [JsonProperty("x", NullValueHandling = NullValueHandling.Ignore)]
        public string X { get; set; }

        /// <summary>
        /// In Spatial Tangent. Only for spatial properties. Array of numbers.
        /// </summary>
        [JsonProperty("ti", NullValueHandling = NullValueHandling.Ignore)]
        public object[] Ti { get; set; }

        /// <summary>
        /// Out Spatial Tangent. Only for spatial properties. Array of numbers.
        /// </summary>
        [JsonProperty("to", NullValueHandling = NullValueHandling.Ignore)]
        public object[] To { get; set; }
    }

    /// <summary>
    /// Rect's rounded corners
    ///
    /// Star's rotation.
    ///
    /// Rounded Corner Radius
    /// </summary>
    public partial class FluffyRoundedCorners
    {
        /// <summary>
        /// Property Index. Used for expressions.
        /// </summary>
        [JsonProperty("ix", NullValueHandling = NullValueHandling.Ignore)]
        public string Ix { get; set; }

        /// <summary>
        /// Property Value
        ///
        /// Property Value keyframes
        /// </summary>
        [JsonProperty("k", NullValueHandling = NullValueHandling.Ignore)]
        public PurpleK? K { get; set; }

        /// <summary>
        /// Property Expression. An AE expression that modifies the value.
        /// </summary>
        [JsonProperty("x", NullValueHandling = NullValueHandling.Ignore)]
        public string X { get; set; }
    }

    /// <summary>
    /// Rect's size
    ///
    /// Ellipse's size
    ///
    /// Gradient Start Point
    ///
    /// Trim Start.
    /// </summary>
    public partial class FluffySize
    {
        /// <summary>
        /// Property Index. Used for expressions.
        /// </summary>
        [JsonProperty("ix", NullValueHandling = NullValueHandling.Ignore)]
        public string Ix { get; set; }

        /// <summary>
        /// Property Value
        ///
        /// Property Value keyframes
        /// </summary>
        [JsonProperty("k", NullValueHandling = NullValueHandling.Ignore)]
        public CK? K { get; set; }

        /// <summary>
        /// Property Expression. An AE expression that modifies the value.
        /// </summary>
        [JsonProperty("x", NullValueHandling = NullValueHandling.Ignore)]
        public string X { get; set; }

        /// <summary>
        /// In Spatial Tangent. Only for spatial properties. Array of numbers.
        /// </summary>
        [JsonProperty("ti", NullValueHandling = NullValueHandling.Ignore)]
        public object[] Ti { get; set; }

        /// <summary>
        /// Out Spatial Tangent. Only for spatial properties. Array of numbers.
        /// </summary>
        [JsonProperty("to", NullValueHandling = NullValueHandling.Ignore)]
        public object[] To { get; set; }
    }

    /// <summary>
    /// Transform values for each repeater copy
    /// </summary>
    public partial class Transform
    {
        /// <summary>
        /// Transform Anchor Point
        /// </summary>
        [JsonProperty("a", NullValueHandling = NullValueHandling.Ignore)]
        public AnchorPoint A { get; set; }

        /// <summary>
        /// Transform Opacity
        /// </summary>
        [JsonProperty("o", NullValueHandling = NullValueHandling.Ignore)]
        public TransformOpacity O { get; set; }

        /// <summary>
        /// Transform Position
        /// </summary>
        [JsonProperty("p", NullValueHandling = NullValueHandling.Ignore)]
        public Position P { get; set; }

        /// <summary>
        /// Transform Position X
        /// </summary>
        [JsonProperty("px", NullValueHandling = NullValueHandling.Ignore)]
        public PositionX Px { get; set; }

        /// <summary>
        /// Transform Position Y
        /// </summary>
        [JsonProperty("py", NullValueHandling = NullValueHandling.Ignore)]
        public PositionY Py { get; set; }

        /// <summary>
        /// Transform Position Z
        /// </summary>
        [JsonProperty("pz", NullValueHandling = NullValueHandling.Ignore)]
        public PositionZ Pz { get; set; }

        /// <summary>
        /// Transform Rotation
        /// </summary>
        [JsonProperty("r", NullValueHandling = NullValueHandling.Ignore)]
        public Rotation R { get; set; }

        /// <summary>
        /// Transform Scale
        /// </summary>
        [JsonProperty("s", NullValueHandling = NullValueHandling.Ignore)]
        public Scale S { get; set; }

        /// <summary>
        /// Transform Skew Axis
        /// </summary>
        [JsonProperty("sa", NullValueHandling = NullValueHandling.Ignore)]
        public TransformSkewAxis Sa { get; set; }

        /// <summary>
        /// Transform Skew
        /// </summary>
        [JsonProperty("sk", NullValueHandling = NullValueHandling.Ignore)]
        public TransformSkew Sk { get; set; }
    }

    /// <summary>
    /// Transform Anchor Point
    /// </summary>
    public partial class AnchorPoint
    {
        /// <summary>
        /// Property Index. Used for expressions.
        /// </summary>
        [JsonProperty("ix", NullValueHandling = NullValueHandling.Ignore)]
        public string Ix { get; set; }

        /// <summary>
        /// Property Value
        ///
        /// Property Value keyframes
        /// </summary>
        [JsonProperty("k", NullValueHandling = NullValueHandling.Ignore)]
        public object[] K { get; set; }

        /// <summary>
        /// Property Expression. An AE expression that modifies the value.
        /// </summary>
        [JsonProperty("x", NullValueHandling = NullValueHandling.Ignore)]
        public string X { get; set; }

        /// <summary>
        /// In Spatial Tangent. Only for spatial properties. Array of numbers.
        /// </summary>
        [JsonProperty("ti", NullValueHandling = NullValueHandling.Ignore)]
        public object[] Ti { get; set; }

        /// <summary>
        /// Out Spatial Tangent. Only for spatial properties. Array of numbers.
        /// </summary>
        [JsonProperty("to", NullValueHandling = NullValueHandling.Ignore)]
        public object[] To { get; set; }
    }

    /// <summary>
    /// Transform Opacity
    /// </summary>
    public partial class TransformOpacity
    {
        /// <summary>
        /// Property Index. Used for expressions.
        /// </summary>
        [JsonProperty("ix", NullValueHandling = NullValueHandling.Ignore)]
        public string Ix { get; set; }

        /// <summary>
        /// Property Value
        ///
        /// Property Value keyframes
        /// </summary>
        [JsonProperty("k", NullValueHandling = NullValueHandling.Ignore)]
        public PurpleK? K { get; set; }

        /// <summary>
        /// Property Expression. An AE expression that modifies the value.
        /// </summary>
        [JsonProperty("x", NullValueHandling = NullValueHandling.Ignore)]
        public string X { get; set; }
    }

    /// <summary>
    /// Transform Position
    /// </summary>
    public partial class Position
    {
        /// <summary>
        /// Property Index. Used for expressions.
        /// </summary>
        [JsonProperty("ix", NullValueHandling = NullValueHandling.Ignore)]
        public string Ix { get; set; }

        /// <summary>
        /// Property Value
        ///
        /// Property Value keyframes
        /// </summary>
        [JsonProperty("k", NullValueHandling = NullValueHandling.Ignore)]
        public object[] K { get; set; }

        /// <summary>
        /// Property Expression. An AE expression that modifies the value.
        /// </summary>
        [JsonProperty("x", NullValueHandling = NullValueHandling.Ignore)]
        public string X { get; set; }

        /// <summary>
        /// In Spatial Tangent. Only for spatial properties. Array of numbers.
        /// </summary>
        [JsonProperty("ti", NullValueHandling = NullValueHandling.Ignore)]
        public object[] Ti { get; set; }

        /// <summary>
        /// Out Spatial Tangent. Only for spatial properties. Array of numbers.
        /// </summary>
        [JsonProperty("to", NullValueHandling = NullValueHandling.Ignore)]
        public object[] To { get; set; }
    }

    /// <summary>
    /// Transform Position X
    /// </summary>
    public partial class PositionX
    {
        /// <summary>
        /// Property Index. Used for expressions.
        /// </summary>
        [JsonProperty("ix", NullValueHandling = NullValueHandling.Ignore)]
        public string Ix { get; set; }

        /// <summary>
        /// Property Value
        ///
        /// Property Value keyframes
        /// </summary>
        [JsonProperty("k", NullValueHandling = NullValueHandling.Ignore)]
        public PurpleK? K { get; set; }

        /// <summary>
        /// Property Expression. An AE expression that modifies the value.
        /// </summary>
        [JsonProperty("x", NullValueHandling = NullValueHandling.Ignore)]
        public string X { get; set; }
    }

    /// <summary>
    /// Transform Position Y
    /// </summary>
    public partial class PositionY
    {
        /// <summary>
        /// Property Index. Used for expressions.
        /// </summary>
        [JsonProperty("ix", NullValueHandling = NullValueHandling.Ignore)]
        public string Ix { get; set; }

        /// <summary>
        /// Property Value
        ///
        /// Property Value keyframes
        /// </summary>
        [JsonProperty("k", NullValueHandling = NullValueHandling.Ignore)]
        public PurpleK? K { get; set; }

        /// <summary>
        /// Property Expression. An AE expression that modifies the value.
        /// </summary>
        [JsonProperty("x", NullValueHandling = NullValueHandling.Ignore)]
        public string X { get; set; }
    }

    /// <summary>
    /// Transform Position Z
    /// </summary>
    public partial class PositionZ
    {
        /// <summary>
        /// Property Index. Used for expressions.
        /// </summary>
        [JsonProperty("ix", NullValueHandling = NullValueHandling.Ignore)]
        public string Ix { get; set; }

        /// <summary>
        /// Property Value
        ///
        /// Property Value keyframes
        /// </summary>
        [JsonProperty("k", NullValueHandling = NullValueHandling.Ignore)]
        public PurpleK? K { get; set; }

        /// <summary>
        /// Property Expression. An AE expression that modifies the value.
        /// </summary>
        [JsonProperty("x", NullValueHandling = NullValueHandling.Ignore)]
        public string X { get; set; }
    }

    /// <summary>
    /// Transform Rotation
    /// </summary>
    public partial class Rotation
    {
        /// <summary>
        /// Property Index. Used for expressions.
        /// </summary>
        [JsonProperty("ix", NullValueHandling = NullValueHandling.Ignore)]
        public string Ix { get; set; }

        /// <summary>
        /// Property Value
        ///
        /// Property Value keyframes
        /// </summary>
        [JsonProperty("k", NullValueHandling = NullValueHandling.Ignore)]
        public PurpleK? K { get; set; }

        /// <summary>
        /// Property Expression. An AE expression that modifies the value.
        /// </summary>
        [JsonProperty("x", NullValueHandling = NullValueHandling.Ignore)]
        public string X { get; set; }
    }

    /// <summary>
    /// Transform Scale
    /// </summary>
    public partial class Scale
    {
        /// <summary>
        /// Property Index. Used for expressions.
        /// </summary>
        [JsonProperty("ix", NullValueHandling = NullValueHandling.Ignore)]
        public string Ix { get; set; }

        /// <summary>
        /// Property Value
        ///
        /// Property Value keyframes
        /// </summary>
        [JsonProperty("k", NullValueHandling = NullValueHandling.Ignore)]
        public object[] K { get; set; }

        /// <summary>
        /// Property Expression. An AE expression that modifies the value.
        /// </summary>
        [JsonProperty("x", NullValueHandling = NullValueHandling.Ignore)]
        public string X { get; set; }

        /// <summary>
        /// In Spatial Tangent. Only for spatial properties. Array of numbers.
        /// </summary>
        [JsonProperty("ti", NullValueHandling = NullValueHandling.Ignore)]
        public object[] Ti { get; set; }

        /// <summary>
        /// Out Spatial Tangent. Only for spatial properties. Array of numbers.
        /// </summary>
        [JsonProperty("to", NullValueHandling = NullValueHandling.Ignore)]
        public object[] To { get; set; }
    }

    /// <summary>
    /// Transform Skew Axis
    /// </summary>
    public partial class TransformSkewAxis
    {
        /// <summary>
        /// Property Index. Used for expressions.
        /// </summary>
        [JsonProperty("ix", NullValueHandling = NullValueHandling.Ignore)]
        public string Ix { get; set; }

        /// <summary>
        /// Property Value
        ///
        /// Property Value keyframes
        /// </summary>
        [JsonProperty("k", NullValueHandling = NullValueHandling.Ignore)]
        public PurpleK? K { get; set; }

        /// <summary>
        /// Property Expression. An AE expression that modifies the value.
        /// </summary>
        [JsonProperty("x", NullValueHandling = NullValueHandling.Ignore)]
        public string X { get; set; }
    }

    /// <summary>
    /// Transform Skew
    /// </summary>
    public partial class TransformSkew
    {
        /// <summary>
        /// Property Index. Used for expressions.
        /// </summary>
        [JsonProperty("ix", NullValueHandling = NullValueHandling.Ignore)]
        public string Ix { get; set; }

        /// <summary>
        /// Property Value
        ///
        /// Property Value keyframes
        /// </summary>
        [JsonProperty("k", NullValueHandling = NullValueHandling.Ignore)]
        public PurpleK? K { get; set; }

        /// <summary>
        /// Property Expression. An AE expression that modifies the value.
        /// </summary>
        [JsonProperty("x", NullValueHandling = NullValueHandling.Ignore)]
        public string X { get; set; }
    }

    /// <summary>
    /// Transform properties
    /// </summary>
    public partial class KsClass
    {
        /// <summary>
        /// Transform Anchor Point
        /// </summary>
        [JsonProperty("a", NullValueHandling = NullValueHandling.Ignore)]
        public AnchorPoint A { get; set; }

        /// <summary>
        /// Transform Opacity
        /// </summary>
        [JsonProperty("o", NullValueHandling = NullValueHandling.Ignore)]
        public TransformOpacity O { get; set; }

        /// <summary>
        /// Transform Position
        /// </summary>
        [JsonProperty("p", NullValueHandling = NullValueHandling.Ignore)]
        public Position P { get; set; }

        /// <summary>
        /// Transform Position X
        /// </summary>
        [JsonProperty("px", NullValueHandling = NullValueHandling.Ignore)]
        public PositionX Px { get; set; }

        /// <summary>
        /// Transform Position Y
        /// </summary>
        [JsonProperty("py", NullValueHandling = NullValueHandling.Ignore)]
        public PositionY Py { get; set; }

        /// <summary>
        /// Transform Position Z
        /// </summary>
        [JsonProperty("pz", NullValueHandling = NullValueHandling.Ignore)]
        public PositionZ Pz { get; set; }

        /// <summary>
        /// Transform Rotation
        /// </summary>
        [JsonProperty("r", NullValueHandling = NullValueHandling.Ignore)]
        public Rotation R { get; set; }

        /// <summary>
        /// Transform Scale
        /// </summary>
        [JsonProperty("s", NullValueHandling = NullValueHandling.Ignore)]
        public Scale S { get; set; }

        /// <summary>
        /// Transform Skew Axis
        /// </summary>
        [JsonProperty("sa", NullValueHandling = NullValueHandling.Ignore)]
        public TransformSkewAxis Sa { get; set; }

        /// <summary>
        /// Transform Skew
        /// </summary>
        [JsonProperty("sk", NullValueHandling = NullValueHandling.Ignore)]
        public TransformSkew Sk { get; set; }
    }

    public partial class MasksProperty
    {
        /// <summary>
        /// Inverted Mask flag
        /// </summary>
        [JsonProperty("inv", NullValueHandling = NullValueHandling.Ignore)]
        public bool? Inv { get; set; }

        /// <summary>
        /// Mask mode. Not all mask types are supported.
        /// </summary>
        [JsonProperty("mode", NullValueHandling = NullValueHandling.Ignore)]
        public string Mode { get; set; }

        /// <summary>
        /// Mask name. Used for expressions and effects.
        /// </summary>
        [JsonProperty("nm", NullValueHandling = NullValueHandling.Ignore)]
        public string Nm { get; set; }

        /// <summary>
        /// Mask opacity.
        /// </summary>
        [JsonProperty("o", NullValueHandling = NullValueHandling.Ignore)]
        public MasksPropertyOpacity O { get; set; }

        /// <summary>
        /// Mask vertices
        /// </summary>
        [JsonProperty("pt", NullValueHandling = NullValueHandling.Ignore)]
        public MasksPropertyPoints Pt { get; set; }
    }

    /// <summary>
    /// Mask opacity.
    /// </summary>
    public partial class MasksPropertyOpacity
    {
        /// <summary>
        /// Property Index. Used for expressions.
        /// </summary>
        [JsonProperty("ix", NullValueHandling = NullValueHandling.Ignore)]
        public string Ix { get; set; }

        /// <summary>
        /// Property Value
        ///
        /// Property Value keyframes
        /// </summary>
        [JsonProperty("k", NullValueHandling = NullValueHandling.Ignore)]
        public PurpleK? K { get; set; }

        /// <summary>
        /// Property Expression. An AE expression that modifies the value.
        /// </summary>
        [JsonProperty("x", NullValueHandling = NullValueHandling.Ignore)]
        public string X { get; set; }
    }

    /// <summary>
    /// Mask vertices
    /// </summary>
    public partial class MasksPropertyPoints
    {
        /// <summary>
        /// Defines if property is animated
        /// </summary>
        [JsonProperty("a", NullValueHandling = NullValueHandling.Ignore)]
        public double? A { get; set; }

        /// <summary>
        /// Property Index. Used for expressions.
        /// </summary>
        [JsonProperty("ix", NullValueHandling = NullValueHandling.Ignore)]
        public string Ix { get; set; }

        /// <summary>
        /// Property Value
        ///
        /// Property Value keyframes
        /// </summary>
        [JsonProperty("k", NullValueHandling = NullValueHandling.Ignore)]
        public VerticesK? K { get; set; }

        /// <summary>
        /// Property Expression. An AE expression that modifies the value.
        /// </summary>
        [JsonProperty("x", NullValueHandling = NullValueHandling.Ignore)]
        public string X { get; set; }

        /// <summary>
        /// In Spatial Tangent. Only for spatial properties. Array of numbers.
        /// </summary>
        [JsonProperty("ti", NullValueHandling = NullValueHandling.Ignore)]
        public object[] Ti { get; set; }

        /// <summary>
        /// Out Spatial Tangent. Only for spatial properties. Array of numbers.
        /// </summary>
        [JsonProperty("to", NullValueHandling = NullValueHandling.Ignore)]
        public object[] To { get; set; }
    }

    public partial class Char
    {
        /// <summary>
        /// Character Value
        /// </summary>
        [JsonProperty("ch", NullValueHandling = NullValueHandling.Ignore)]
        public string Ch { get; set; }

        /// <summary>
        /// Character Font Family
        /// </summary>
        [JsonProperty("fFamily", NullValueHandling = NullValueHandling.Ignore)]
        public string FFamily { get; set; }

        /// <summary>
        /// Character Font Size
        /// </summary>
        [JsonProperty("size", NullValueHandling = NullValueHandling.Ignore)]
        public string Size { get; set; }

        /// <summary>
        /// Character Font Style
        /// </summary>
        [JsonProperty("style", NullValueHandling = NullValueHandling.Ignore)]
        public string Style { get; set; }

        /// <summary>
        /// Character Width
        /// </summary>
        [JsonProperty("w", NullValueHandling = NullValueHandling.Ignore)]
        public double? W { get; set; }
    }

    public partial class AnimationLayer
    {
        /// <summary>
        /// Auto-Orient along path AE property.
        /// </summary>
        [JsonProperty("ao", NullValueHandling = NullValueHandling.Ignore)]
        public double? Ao { get; set; }

        /// <summary>
        /// Blend Mode
        /// </summary>
        [JsonProperty("bm", NullValueHandling = NullValueHandling.Ignore)]
        public double? Bm { get; set; }

        /// <summary>
        /// Parsed layer name used as html class on SVG/HTML renderer
        /// </summary>
        [JsonProperty("cl", NullValueHandling = NullValueHandling.Ignore)]
        public string Cl { get; set; }

        /// <summary>
        /// 3d layer flag
        /// </summary>
        [JsonProperty("ddd", NullValueHandling = NullValueHandling.Ignore)]
        public int Ddd { get; set; }

        /// <summary>
        /// List of Effects
        ///
        /// Auto-Orient along path AE property.
        /// </summary>
        [JsonProperty("ef", NullValueHandling = NullValueHandling.Ignore)]
        public Ef? Ef { get; set; }

        /// <summary>
        /// Boolean when layer has a mask. Will be deprecated in favor of checking masksProperties.
        /// </summary>
        [JsonProperty("hasMask", NullValueHandling = NullValueHandling.Ignore)]
        public double? HasMask { get; set; }

        /// <summary>
        /// Layer index in AE. Used for parenting and expressions.
        /// </summary>
        [JsonProperty("ind", NullValueHandling = NullValueHandling.Ignore)]
        public double? Ind { get; set; }

        /// <summary>
        /// In Point of layer. Sets the initial frame of the layer.
        /// </summary>
        [JsonProperty("ip", NullValueHandling = NullValueHandling.Ignore)]
        public int Ip { get; set; }

        /// <summary>
        /// Shape list of items
        /// </summary>
        [JsonProperty("shapes", NullValueHandling = NullValueHandling.Ignore)]
        public List<LayerIt> Shapes { get; set; }

        /// <summary>
        /// Transform properties
        /// </summary>
        [JsonProperty("ks", NullValueHandling = NullValueHandling.Ignore)]
        public KsClass Ks { get; set; }

        /// <summary>
        /// Parsed layer name used as html id on SVG/HTML renderer
        /// </summary>
        [JsonProperty("ln", NullValueHandling = NullValueHandling.Ignore)]
        public string Ln { get; set; }

        /// <summary>
        /// List of Masks
        /// </summary>
        [JsonProperty("masksProperties", NullValueHandling = NullValueHandling.Ignore)]
        public MasksProperty[] MasksProperties { get; set; }

        /// <summary>
        /// After Effects Layer Name. Used for expressions.
        /// </summary>
        [JsonProperty("nm", NullValueHandling = NullValueHandling.Ignore)]
        public double? Nm { get; set; }

        /// <summary>
        /// Out Point of layer. Sets the final frame of the layer.
        /// </summary>
        [JsonProperty("op", NullValueHandling = NullValueHandling.Ignore)]
        public int Op { get; set; }

        /// <summary>
        /// Layer Parent. Uses ind of parent.
        /// </summary>
        [JsonProperty("parent", NullValueHandling = NullValueHandling.Ignore)]
        public double? Parent { get; set; }

        /// <summary>
        /// Layer Time Stretching
        /// </summary>
        [JsonProperty("sr", NullValueHandling = NullValueHandling.Ignore)]
        public int Sr { get; set; }

        /// <summary>
        /// Start Time of layer. Sets the start time of the layer.
        /// </summary>
        [JsonProperty("st", NullValueHandling = NullValueHandling.Ignore)]
        public int St { get; set; }

        /// <summary>
        /// Type of layer: Shape.
        ///
        /// Type of layer: Solid.
        ///
        /// Type of layer: Image.
        ///
        /// Type of layer: Null.
        ///
        /// Type of layer: Text.
        /// </summary>
        [JsonProperty("ty", NullValueHandling = NullValueHandling.Ignore)]
        public int Ty { get; set; }

        /// <summary>
        /// Color of the solid in hex
        /// </summary>
        [JsonProperty("sc", NullValueHandling = NullValueHandling.Ignore)]
        public string Sc { get; set; }

        /// <summary>
        /// Height of the solid.
        /// </summary>
        [JsonProperty("sh", NullValueHandling = NullValueHandling.Ignore)]
        public double? Sh { get; set; }

        /// <summary>
        /// Width of the solid.
        /// </summary>
        [JsonProperty("sw", NullValueHandling = NullValueHandling.Ignore)]
        public double? Sw { get; set; }

        /// <summary>
        /// id pointing to the source image defined on 'assets' object
        /// </summary>
        [JsonProperty("refId", NullValueHandling = NullValueHandling.Ignore)]
        public string RefId { get; set; }
    }

    public partial struct Ef
    {
        public Dictionary<string, object>[] AnythingMapArray;
        public double? Double;

        public static implicit operator Ef(Dictionary<string, object>[] AnythingMapArray) => new Ef { AnythingMapArray = AnythingMapArray };
        public static implicit operator Ef(double Double) => new Ef { Double = Double };
    }

    public partial struct PurpleK
    {
        public double? Double;
        public PropertiesvalueKeyframe[] PropertiesvalueKeyframeArray;

        public static implicit operator PurpleK(double Double) => new PurpleK { Double = Double };
        public static implicit operator PurpleK(PropertiesvalueKeyframe[] PropertiesvalueKeyframeArray) => new PurpleK { PropertiesvalueKeyframeArray = PropertiesvalueKeyframeArray };
    }

    public partial struct CK
    {
        public double[] AnythingArray;
        public double? Double;

        public static implicit operator CK(double[] AnythingArray) => new CK { AnythingArray = AnythingArray };
        public static implicit operator CK(double Double) => new CK { Double = Double };
    }

    public partial struct VerticesK
    {
        public KClass KClass;
        public PropertiesshapePropKeyframe[] PropertiesshapePropKeyframeArray;

        public static implicit operator VerticesK(KClass KClass) => new VerticesK { KClass = KClass };
        public static implicit operator VerticesK(PropertiesshapePropKeyframe[] PropertiesshapePropKeyframeArray) => new VerticesK { PropertiesshapePropKeyframeArray = PropertiesshapePropKeyframeArray };
    }

    public partial class Animation
    {
        public static Animation FromJson(string json) => JsonConvert.DeserializeObject<Animation>(json, giftolottieSharp.Schema.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this Animation self) => JsonConvert.SerializeObject(self, giftolottieSharp.Schema.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                EfConverter.Singleton,
                PurpleKConverter.Singleton,
                CkConverter.Singleton,
                VerticesKConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class EfConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Ef) || t == typeof(Ef?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.Integer:
                case JsonToken.Float:
                    var doubleValue = serializer.Deserialize<double>(reader);
                    return new Ef { Double = doubleValue };
                case JsonToken.StartArray:
                    var arrayValue = serializer.Deserialize<Dictionary<string, object>[]>(reader);
                    return new Ef { AnythingMapArray = arrayValue };
            }
            throw new Exception("Cannot unmarshal type Ef");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (Ef)untypedValue;
            if (value.Double != null)
            {
                serializer.Serialize(writer, value.Double.Value);
                return;
            }
            if (value.AnythingMapArray != null)
            {
                serializer.Serialize(writer, value.AnythingMapArray);
                return;
            }
            throw new Exception("Cannot marshal type Ef");
        }

        public static readonly EfConverter Singleton = new EfConverter();
    }

    internal class PurpleKConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(PurpleK) || t == typeof(PurpleK?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.Integer:
                case JsonToken.Float:
                    var doubleValue = serializer.Deserialize<double>(reader);
                    return new PurpleK { Double = doubleValue };
                case JsonToken.StartArray:
                    var arrayValue = serializer.Deserialize<PropertiesvalueKeyframe[]>(reader);
                    return new PurpleK { PropertiesvalueKeyframeArray = arrayValue };
            }
            throw new Exception("Cannot unmarshal type PurpleK");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (PurpleK)untypedValue;
            if (value.Double != null)
            {
                serializer.Serialize(writer, value.Double.Value);
                return;
            }
            if (value.PropertiesvalueKeyframeArray != null)
            {
                serializer.Serialize(writer, value.PropertiesvalueKeyframeArray);
                return;
            }
            throw new Exception("Cannot marshal type PurpleK");
        }

        public static readonly PurpleKConverter Singleton = new PurpleKConverter();
    }

    internal class CkConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(CK) || t == typeof(CK?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.Integer:
                case JsonToken.Float:
                    var doubleValue = serializer.Deserialize<double>(reader);
                    return new CK { Double = doubleValue };
                case JsonToken.StartArray:
                    var arrayValue = serializer.Deserialize<double[]>(reader);
                    return new CK { AnythingArray = arrayValue };
            }
            throw new Exception("Cannot unmarshal type CK");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (CK)untypedValue;
            if (value.Double != null)
            {
                serializer.Serialize(writer, value.Double.Value);
                return;
            }
            if (value.AnythingArray != null)
            {
                serializer.Serialize(writer, value.AnythingArray);
                return;
            }
            throw new Exception("Cannot marshal type CK");
        }

        public static readonly CkConverter Singleton = new CkConverter();
    }

    internal class VerticesKConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(VerticesK) || t == typeof(VerticesK?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.StartObject:
                    var objectValue = serializer.Deserialize<KClass>(reader);
                    return new VerticesK { KClass = objectValue };
                case JsonToken.StartArray:
                    var arrayValue = serializer.Deserialize<PropertiesshapePropKeyframe[]>(reader);
                    return new VerticesK { PropertiesshapePropKeyframeArray = arrayValue };
            }
            throw new Exception("Cannot unmarshal type VerticesK");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (VerticesK)untypedValue;
            if (value.PropertiesshapePropKeyframeArray != null)
            {
                serializer.Serialize(writer, value.PropertiesshapePropKeyframeArray);
                return;
            }
            if (value.KClass != null)
            {
                serializer.Serialize(writer, value.KClass);
                return;
            }
            throw new Exception("Cannot marshal type VerticesK");
        }

        public static readonly VerticesKConverter Singleton = new VerticesKConverter();
    }
}
